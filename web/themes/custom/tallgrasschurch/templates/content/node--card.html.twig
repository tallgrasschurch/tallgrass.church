{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{#
/**
 * Custom variables:
 * - node_type
 */
#}

{%
  set classes = [
    'node',
    'node--' ~ view_mode,
    'node--' ~ node_type,
    'card',
  ]
%}

{%
  set title_classes = [
    'node__title',
    'card__title',
  ]
%}

<article{{ attributes.addClass(classes) }}>
  <div class="card__img {% if not content.field_image %}card__img--default{% endif %}">
    {% if content.field_image %}
      {{ content.field_image }}
    {% else %}
      <svg xmlns="http://www.w3.org/2000/svg" width="640" height="360" viewBox="0 0 640 360">
        <g fill="none" fill-rule="evenodd">
          <rect width="640" height="360" fill="#305697"/>
          <circle cx="320" cy="180" r="90" fill="#F5F9FE"/>
          <path fill="#305697" fill-rule="nonzero" d="M370.1875,240 C371.734283,240 373,238.734283 373,237.1875 L373,235.3125 C373,233.765717 371.734283,232.5 370.1875,232.5 L369.414108,232.5 C368.476608,227.765579 368.664062,220.851517 369.507721,217.078171 C371.546829,216.234283 373,214.21875 373,211.875 L373,125.625 C373,122.507858 370.492142,120 367.375,120 L286.75,120 C276.390579,120 268,128.390579 268,138.75 L268,225 C268,233.285065 274.714935,240 283,240 L370.1875,240 Z M276,211 L276,138.172693 C276,132.004435 281.039062,127 287.25,127 L366,127 L366,208.933079 L283.5,208.933079 C280.753189,208.933079 278.21489,209.719796 276,211 Z M329.178571,202 C332.306453,202 334.857143,199.494588 334.857143,196.416667 L334.857143,172.222222 L344.321429,172.222222 C347.44931,172.222222 350,169.71681 350,166.638889 L350,155.472222 C350,152.394301 347.44931,149.888889 344.321429,149.888889 L334.857143,149.888889 L334.857143,140.583333 C334.857143,137.505412 332.306453,135 329.178571,135 L317.821429,135 C314.693547,135 312.142857,137.505412 312.142857,140.583333 L312.142857,149.888889 L302.678571,149.888889 C299.55069,149.888889 297,152.394301 297,155.472222 L297,166.638889 C297,169.71681 299.55069,172.222222 302.678571,172.222222 L312.142857,172.222222 L312.142857,196.416667 C312.142857,199.494588 314.693547,202 317.821429,202 L329.178571,202 Z M327.8,195 L320.2,195 L320.2,164.714286 L305,164.714286 L305,157.142857 L320.2,157.142857 L320.2,142 L327.8,142 L327.8,157.142857 L343,157.142857 L343,164.714286 L327.8,164.714286 L327.8,195 Z M362,232 L282.477844,232 C278.34869,232 275,228.641388 275,224.5 C275,220.358612 278.34869,217 282.477844,217 L362,217 C361.322457,221.406204 361.275675,227.218658 362,232 Z"/>
        </g>
      </svg>
    {% endif %}
  </div><!-- .card__img -->

  <div class="card__content">
    <header class="card__header">
      {{ title_prefix }}
      <h2{{ title_attributes.addClass(title_classes) }}>
        <a href="{{ url }}" rel="bookmark">{{ label }}</a>
      </h2>
      {{ title_suffix }}

      {% if node_type in ['teaching', 'podcast'] %}
        <div class="card__label">
          {% if node_type == 'teaching' %}
            Teaching
          {% elseif node_type == 'podcast' %}
            Podcast
          {% endif %}
        </div><!-- .card__label -->

        <div class="card__date">
          <time datetime="{{ node.createdtime|format_date('html_date') }}">{{ node.createdtime|format_date('long') }}</time>
        </div><!-- .card__date -->
      {% endif %}
    </header><!-- .card__header -->

    <div class="card__footer">
      <a href="{{ url }}">
        View
        {% if node_type == 'teaching' %}
          teaching
        {% elseif node_type == 'podcast' %}
          podcast
        {% endif %}
        &rarr;
      </a>
    </div><!-- .card__footer -->
  </div><!-- .card__content -->
</article><!-- .card -->
